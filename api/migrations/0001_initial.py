# Generated by Django 5.0.1 on 2025-10-01 22:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('provider', 'Provider'), ('admin', 'Admin')], default='customer', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subcategories', to='api.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),        migrations.CreateModel(
            name='MessageThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(limit_choices_to={'role': 'customer'}, on_delete=django.db.models.deletion.CASCADE, related_name='customer_threads', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(limit_choices_to={'role': 'provider'}, on_delete=django.db.models.deletion.CASCADE, related_name='provider_threads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
                'unique_together': {('customer', 'provider')},
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_for_reviews', models.BooleanField(default=True)),
                ('email_for_claims', models.BooleanField(default=True)),
                ('email_for_messages', models.BooleanField(default=True)),
                ('email_for_system', models.BooleanField(default=True)),
                ('in_app_enabled', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_claimed', models.BooleanField(default=False)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, help_text='Auto-maintained search vector for full-text search', null=True)),
                ('user', models.OneToOneField(blank=True, help_text='The user who owns this provider account (null for unclaimed listings)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Claim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_documents', models.FileField(blank=True, null=True, upload_to='claim_documents/')),
                ('additional_info', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('under_review', 'Under Review')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True, null=True)),
                ('verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_verification_code', models.CharField(blank=True, max_length=10, null=True)),
                ('phone_verified', models.BooleanField(default=False)),
                ('phone_verification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('phone_verification_deferred', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('claimant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_claims', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to='api.provider')),
            ],
        ),
        # Availability model: Provider's weekly schedule and operating hours
        # (e.g., "Monday 9am-5pm") - NOT the services they offer
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability', to='api.provider')),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(default='United States', max_length=100)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('is_primary', models.BooleanField(default=False)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='api.provider')),
            ],
            options={
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='PurchaseVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_date', models.DateTimeField()),
                ('transaction_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('verification_method', models.CharField(max_length=50)),
                ('verification_details', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_verifications', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_verifications', to='api.provider')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_purchases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('flagged', 'Flagged for Review')], default='pending', max_length=20)),
                ('moderation_notes', models.TextField(blank=True, null=True)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('reported_count', models.PositiveIntegerField(default=0)),
                ('is_verified', models.BooleanField(default=False)),
                ('purchase_verified', models.BooleanField(default=False)),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_reviews', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.provider')),
                ('purchase_verification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to='api.purchaseverification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam or Advertising'), ('offensive', 'Offensive Content'), ('irrelevant', 'Irrelevant Content'), ('fake', 'Suspected Fake Review'), ('conflict', 'Conflict of Interest'), ('other', 'Other')], max_length=20)),
                ('details', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_reports', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_reports', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='api.review')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        # Service model: Specific service offerings provided by a provider
        # (e.g., "Plumbing Repair", "Electrical Installation") with pricing info
        # This is distinct from Availability which represents the provider's schedule
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('price_type', models.CharField(choices=[('fixed', 'Fixed Price'), ('hourly', 'Per Hour'), ('daily', 'Per Day'), ('quote', 'Quote Required')], default='quote', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='api.category')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='api.provider')),
            ],
        ),
        migrations.CreateModel(
            name='UserBehavior',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('view', 'View Provider'), ('search', 'Search Providers'), ('favorite', 'Add to Favorites'), ('contact', 'Contact Provider')], max_length=20)),
                ('search_query', models.TextField(blank=True, null=True)),
                ('location_lat', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('location_lng', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('session_id', models.CharField(blank=True, max_length=40, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.category')),
                ('provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.provider')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_userbehavior',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('algorithm_version', models.CharField(default='v1.0', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.provider')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_userrecommendation',
                'ordering': ['-score'],
            },
        ),
        migrations.CreateModel(
            name='ABTestVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment_name', models.CharField(max_length=100)),
                ('variant', models.CharField(max_length=50)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_abtestvariant',
                'indexes': [models.Index(fields=['user', 'experiment_name'], name='api_abtestv_user_id_e8dfe4_idx'), models.Index(fields=['experiment_name', 'variant'], name='api_abtestv_experim_bc4f4e_idx')],
                'unique_together': {('user', 'experiment_name')},
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='api.messagethread')),
            ],
            options={
                'ordering': ['created_at'],
                'indexes': [models.Index(fields=['thread', 'created_at'], name='api_message_thread__045a22_idx'), models.Index(fields=['sender', 'created_at'], name='api_message_sender__eea5d5_idx')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('review', 'Review'), ('claim', 'Claim'), ('message', 'Message'), ('system', 'System')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'notification_type'], name='api_notific_user_id_5b04a6_idx'), models.Index(fields=['user', 'is_read'], name='api_notific_user_id_16328d_idx'), models.Index(fields=['created_at'], name='api_notific_created_238c70_idx')],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='api.provider')),
            ],
            options={
                'unique_together': {('user', 'provider')},
            },
        ),
        migrations.AddConstraint(
            model_name='claim',
            constraint=models.UniqueConstraint(condition=models.Q(('status__in', ['pending', 'approved'])), fields=('provider', 'claimant'), name='unique_active_claim_per_user_provider'),
        ),
        migrations.AlterUniqueTogether(
            name='availability',
            unique_together={('provider', 'day_of_week')},
        ),
        migrations.AddConstraint(
            model_name='availability',
            constraint=models.CheckConstraint(
                check=models.Q(start_time__lt=models.F('end_time')),
                name='availability_start_before_end',
            ),
        ),
        migrations.AddIndex(
            model_name='purchaseverification',
            index=models.Index(fields=['provider', 'customer', '-transaction_date'], name='api_purchas_provide_5864a8_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseverification',
            index=models.Index(fields=['is_valid'], name='api_purchas_is_vali_37b29f_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['status'], name='api_review_status_238803_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reported_count'], name='api_review_reporte_8208b8_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['purchase_verified'], name='api_review_purchas_06df07_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'provider')},
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['resolved'], name='api_reviewr_resolve_5071f0_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['reason'], name='api_reviewr_reason_951452_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewreport',
            unique_together={('review', 'reporter')},
        ),
        migrations.AddIndex(
            model_name='userbehavior',
            index=models.Index(fields=['user', 'action_type'], name='api_userbeh_user_id_028b40_idx'),
        ),
        migrations.AddIndex(
            model_name='userbehavior',
            index=models.Index(fields=['created_at'], name='api_userbeh_created_4ddcee_idx'),
        ),
        migrations.AddIndex(
            model_name='userbehavior',
            index=models.Index(fields=['provider'], name='api_userbeh_provide_dca7ae_idx'),
        ),
        migrations.AddIndex(
            model_name='userbehavior',
            index=models.Index(fields=['session_id'], name='api_userbeh_session_f6fba4_idx'),
        ),
        migrations.AddIndex(
            model_name='userrecommendation',
            index=models.Index(fields=['user', '-score'], name='api_userrec_user_id_80f46e_idx'),
        ),
        migrations.AddIndex(
            model_name='userrecommendation',
            index=models.Index(fields=['expires_at'], name='api_userrec_expires_24e999_idx'),
        ),
        migrations.AddIndex(
            model_name='userrecommendation',
            index=models.Index(fields=['algorithm_version'], name='api_userrec_algorit_517adf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrecommendation',
            unique_together={('user', 'provider')},
        ),
    ]
